package Interfaz;

import Algoritmo.GeneracionReglas.Regla;
import Algoritmo.ItemsetsFrecuentes.Comparacion;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextPane;
import javax.swing.LookAndFeel;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class VentanaPrincipal extends javax.swing.JFrame {

    private File ArchivoFinal; // Archivo
    private String RutaFinal; // Ruta del archivo
    private ArrayList<Regla> Reglas; // Conjunto de reglas
    private ArrayList<Comparacion> Comparaciones; // Conjunto de comparaciones
    private File path = null;

    // Constructor de la ventana principal 
    public VentanaPrincipal() {
        super("SwingWorker");
        initComponents();
        this.setTitle("Inteligencia Artificial - Algoritmo FP-Growth");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setSize(jPanel1.getSize());
        this.setComparaciones(new ArrayList<Comparacion>());
        jTextPane1.setEditable(false);
        setIconImage(new ImageIcon(getClass().getResource("/Imagenes/icons-180x180.png")).getImage());
        jButton2.setHorizontalTextPosition(SwingConstants.LEFT);
    }

    // Getters y Setters de los atributos
    public ArrayList<Comparacion> getComparaciones() {
        return Comparaciones;
    }

    public void setComparaciones(ArrayList<Comparacion> Comparaciones) {
        this.Comparaciones = Comparaciones;
    }

    public ArrayList<Regla> getReglas() {
        return Reglas;
    }

    public void setReglas(ArrayList<Regla> Reglas) {
        this.Reglas = Reglas;
    }

    public JTextPane getjTextPane3() {
        return jTextPane3;
    }

    public void setjTextPane3(String jTextPane3) {
        this.jTextPane3.setText(jTextPane3);
    }

    public JTextPane getjTextPane4() {
        return jTextPane4;
    }

    public void setjTextPane4(String jTextPane4) {
        this.jTextPane4.setText(jTextPane4);
    }

    public File getPath() {
        return path;
    }

    public void setPath(File path) {
        this.path = path;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 204));

        jPanel1.setBackground(new java.awt.Color(0, 53, 100));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 3, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Algoritmo FP-Growth");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(240, 10, 508, 60);

        jButton1.setBackground(new java.awt.Color(0, 49, 77));
        jButton1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        jButton1.setText("Examinar");
        jButton1.setToolTipText("Seleccione el archivo de extensión \".dat\"  que contiene el conjunto de transacciones");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(30, 90, 180, 50);

        jTextPane1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jTextPane1.setForeground(new java.awt.Color(204, 204, 204));
        jTextPane1.setText("ejemplo.dat");
        jTextPane1.setToolTipText("Ingrese archivo de extensión \".dat\"");
        jScrollPane2.setViewportView(jTextPane1);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(220, 90, 720, 50);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Soporte:");
        jLabel3.setToolTipText("Determina el porcentaje mínimo de aparición de los productos de cada regla en las transacciones");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(100, 180, 130, 31);

        jButton2.setBackground(new java.awt.Color(0, 49, 77));
        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/flehc.png"))); // NOI18N
        jButton2.setText("Calcular reglas");
        jButton2.setToolTipText("Comienza el procesamiento para la obtención de las reglas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(530, 310, 350, 110);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Confianza:");
        jLabel2.setToolTipText("Determina el porcentaje mínimo de aparición que debe tener el consecuente de cada regla, habiéndose cumplido el antecedente");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(70, 230, 150, 36);

        jTextPane3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jTextPane3.setToolTipText("Debe ser un entero entre 1 y 100");
        jTextPane3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextPane3KeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(jTextPane3);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(220, 160, 90, 50);

        jTextPane4.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jTextPane4.setToolTipText("Debe ser un entero entre 1 y 100");
        jTextPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane4KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextPane4KeyTyped(evt);
            }
        });
        jScrollPane5.setViewportView(jTextPane4);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(220, 220, 90, 50);

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Entero entre 1 - 100");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(370, 190, 370, 45);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("%");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(320, 240, 21, 31);

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("%");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(320, 180, 21, 31);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel1.add(jLayeredPane1);
        jLayeredPane1.setBounds(655, 240, 100, 100);

        jButton3.setBackground(new java.awt.Color(0, 49, 77));
        jButton3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/if_dialog-information_118939.png"))); // NOI18N
        jButton3.setText("Información");
        jButton3.setMaximumSize(new java.awt.Dimension(165, 57));
        jButton3.setMinimumSize(new java.awt.Dimension(165, 57));
        jButton3.setPreferredSize(new java.awt.Dimension(165, 57));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(40, 360, 200, 50);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/hdblue.jpg"))); // NOI18N
        jLabel7.setText("jLabel7");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(0, 0, 1050, 480);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FileFilter filter = new FileNameExtensionFilter("DAT File", "dat");
        JFileChooser chooser = null;
        LookAndFeel prev = UIManager.getLookAndFeel();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            chooser = new JFileChooser(); // Objeto JFileChooser , utilizado para cargar el archivo .dat
            UIManager.setLookAndFeel(prev);
        } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
        }
        if (path != null) {
            chooser.setCurrentDirectory(path);
        }
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setPreferredSize(new Dimension(900, 500));
        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Abrir Archivo");
        chooser.showOpenDialog(null);
        File archivo = chooser.getSelectedFile();
        String nombre = archivo.getAbsolutePath();
        path = archivo;
        ArchivoFinal = archivo;
        RutaFinal = path.getAbsolutePath();
        jTextPane1.setText(RutaFinal);
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean esNumero(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public JTextPane getjTextPane1() {
        return jTextPane1;
    }

    public void setjTextPane1(String jTextPane1) {
        this.jTextPane1.setText(jTextPane1);
        this.setRutaFinal(jTextPane1);
    }

    /* Una vez cargado los parametros ,se  crea el objeto BarraProgeso,
    se setean sus atributos y se incia el procesamiento del algoritmo*/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.esNumero(jTextPane3.getText()) && this.esNumero(jTextPane4.getText())) {
            String MinConf = jTextPane4.getText();
            String MinSup = jTextPane3.getText();
            if (Integer.parseInt(MinSup) <= 100 && Integer.parseInt(MinSup) >= 1) { // Control si el soporte se encuentra en el rango de 1 a 100
                if (Integer.parseInt(MinConf) <= 100 && Integer.parseInt(MinConf) >= 1) { // Control si la confianza se encuentra en el rango de 1 a 100

                    String text = jTextPane1.getText();
                    if (text.equals("ejemplo.dat")) { // Control sobre la carga del archivo
                        IngArchivo ingA = new IngArchivo(this, true);
                        ingA.setVisible(true);
                    } else if (!(text.endsWith(".dat"))) { //Control sobre la extensión del archivo
                        ErrorExtension error = new ErrorExtension(this, true);
                        error.setVisible(true);
                    } else {

                        boolean bandera = true;
                        File archivo = null;
                        FileReader fr = null;
                        BufferedReader br = null;
                        try {
                            // Apertura del fichero y creacion del BufferedReader para hacer una lectura comoda 
                            archivo = new File(this.getRutaFinal());
                            fr = new FileReader(archivo);
                            br = new BufferedReader(fr);
                            String linea;
                            linea = br.readLine(); // Lectura de la primera linea del archivo
                            while ((linea) != null) {
                                String[] cadena = linea.split(" ");
                                for (int x = 0; x < cadena.length; x++) {
                                    try {
                                        Integer.parseInt(cadena[x]);
                                    } catch (NumberFormatException e) {
                                        bandera = false;

                                    }

                                }
                                linea = br.readLine(); // Lectura de la siguiente linea del archivo
                            }
                        } catch (FileNotFoundException ex) {
                            System.out.print("No encontro el archivo");
                        } catch (IOException ex) {
                            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        if (bandera == false) { // Control sobre la estructura del archivo
                            Formato format = new Formato(this, true);
                            format.setVisible(true);
                        } else {
                            if (Integer.parseInt(MinConf) < Integer.parseInt(MinSup)) { // Control de la confianza menor al soporte
                                MenorConfSoport ventConMin = new MenorConfSoport();
                                ventConMin.setVisible(true);
                                final SwingWorker worker2 = new SwingWorker() {
                                    @Override
                                    protected Object doInBackground() throws Exception {
                                        ventConMin.setRutaFinal(VentanaPrincipal.this.getRutaFinal());
                                        ventConMin.setComparaciones(VentanaPrincipal.this.getComparaciones());
                                        ventConMin.setPath(VentanaPrincipal.this.getPath());
                                        ventConMin.setMinConf(VentanaPrincipal.this.getjTextPane4().getText());
                                        ventConMin.setMinSup(VentanaPrincipal.this.getjTextPane3().getText());
                                        return null;
                                    }
                                };
                                worker2.execute();
                                this.dispose();
                            } else {
                                try {
                                    BarraProgreso barra = new BarraProgreso(); //aqui se crea el objeto BarraProgreso
                                    barra.setRutaFinal(this.getRutaFinal());
                                    barra.setMinConf(MinConf);
                                    barra.setMinSup(MinSup);
                                    barra.setVisible(true);
                                    barra.setTitle("Espere por favor");

                                    final SwingWorker worker = new SwingWorker() {
                                        @Override
                                        protected Object doInBackground() throws Exception {
                                            barra.GeneracionItemsCandidatos(); // Se incia el procesamiento del algoritmo FP-Growth
                                            VentanaFinal VentF = new VentanaFinal(); // Se crea la ventana final
                                            VentF.setRutaFinal(barra.getRutaFinal());
                                            VentF.setPath(path);
                                            VentF.setMinConf(barra.getMinConf());
                                            VentF.setMinSup(barra.getMinSup());
                                            VentF.setNumtransc(barra.getObGrowth().getNumTransc());
                                            VentF.setConjunFrecuentes(barra.getObGrowth().getConjunFrecuentes());
                                            VentF.setCOnjunReglas(barra.getObGrowth().getConjunReglas());
                                            VentF.setTiempo(barra.getTiempo());
                                            Comparacion compa = new Comparacion(); // Se crea el objeto comparación utilizado para guardar los resultados de las corridas
                                            compa.setMinSup(barra.getMinSup());
                                            compa.setMinConf(barra.getMinConf());
                                            compa.setTiempo(barra.getTiempo());
                                            compa.setRegla(barra.getObGrowth().getConjunReglas().size());
                                            VentanaPrincipal.this.getComparaciones().add(compa); // Se guarda el objeto comparación en una lista para ser utilizado
                                            VentF.setComparaciones(VentanaPrincipal.this.getComparaciones());

                                            int cont = 0;
                                            for (int m = 0; m < barra.getObGrowth().getConjunFrecuentes().size(); m++) {
                                                if (barra.getObGrowth().getConjunFrecuentes().get(m).getItemsets().size() > 0) {
                                                    cont = cont + 1;
                                                }
                                            }
                                            VentF.CargarCombo2();
                                            VentF.CargarCombo(cont);
                                            barra.dispose();
                                            VentF.setVisible(true); // Se muestra la ventana final con los resultados obtenidos
                                            final SwingWorker worker2 = new SwingWorker() {
                                                @Override
                                                protected Object doInBackground() throws Exception {
                                                    VentF.CargarReglas(); // Se cargan las reglas obtenidas en la ventana final
                                                    VentF.OrdenarReglas(); // Se ordenan las reglas segun el soporte y la confianza
                                                    return null;
                                                }

                                            };
                                            worker2.execute();
                                            return null;
                                        }

                                    };
                                    worker.execute();
                                    this.dispose();

                                } catch (IOException ex) {
                                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }
                } else {
                    ErroConfSoporte error = new ErroConfSoporte(this, true);
                    error.setVisible(true);
                }
            } else {
                ErroConfSoporte error = new ErroConfSoporte(this, true);
                error.setVisible(true);
            }
        } else {
            ErroConfSoporte error = new ErroConfSoporte(this, true);
            error.setVisible(true);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Informacion inf = new Informacion(this, true);
        inf.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextPane3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane3KeyPressed
        char caracter = evt.getKeyChar();
        if (caracter == KeyEvent.VK_ENTER) {
            evt.consume();
        }
        if (caracter == KeyEvent.VK_TAB) {
            evt.consume();
            (jTextPane4).requestFocus();
        }
    }//GEN-LAST:event_jTextPane3KeyPressed

    private void jTextPane3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane3KeyTyped
        char caracter = evt.getKeyChar();
        if (jTextPane3.getText().length() == 3) {
            evt.consume();
        }
        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextPane3KeyTyped

    private void jTextPane4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane4KeyPressed
        char caracter = evt.getKeyChar();
        if (caracter == KeyEvent.VK_ENTER) {
            evt.consume();
        }
        if (caracter == KeyEvent.VK_TAB) {
            evt.consume();
            (jButton2).requestFocus();
        }
    }//GEN-LAST:event_jTextPane4KeyPressed

    private void jTextPane4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane4KeyTyped
        char caracter = evt.getKeyChar();
        if (jTextPane4.getText().length() == 3) {
            evt.consume();
        }

        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextPane4KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    public File getArchivoFinal() {
        return ArchivoFinal;
    }

    public void setArchivoFinal(File ArchivoFinal) {
        this.ArchivoFinal = ArchivoFinal;
    }

    public String getRutaFinal() {
        return RutaFinal;
    }

    public void setRutaFinal(String RutaFinal) {
        this.RutaFinal = RutaFinal;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    // End of variables declaration//GEN-END:variables
}
